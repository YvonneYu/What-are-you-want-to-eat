{"version":3,"sources":["components/ToolBar/ToolBar.js","components/Layout/Layout.js","components/Restaurants/Restaurant.js","utils/utils.js","api/restaurantStorage.js","actions/actions.js","constants/ActionTypes.js","containers/RestaurantsBuilder/RestaurantsBuilder.js","components/ChoicesPanel/ChoiceSelectors.js","containers/ChoicesPanelBuilder/ChoicesSectionBuilder.js","components/ChoicesPanel/ChoicesPanelRestInput.js","components/ChoicesPanel/RestInputs.js","components/ChoicesPanel/ChoicesSubmitInput.js","containers/ChoicesPanelBuilder/ChoicesPanelBuilder.js","containers/FindPanelBuilder/FindPanelBuilder.js","App.js","serviceWorker.js","reducers/choicesPanel.js","reducers/restaurantList.js","reducers/rootReducer.js","index.js","stores/configureStore.js"],"names":["ToolBar","react_default","a","createElement","className","react_router_dom","to","exact","layout","props","Fragment","components_ToolBar_ToolBar","children","restaurant","name","tel","href","address","choices","join","onClick","onDelete","id","deepCloneObj","obj","JSON","parse","stringify","choicesHelper","getCheckedChoices","reduce","checkedList","result","data","filter","choice","checked","accList","concat","Object","toConsumableArray","label","isSiteInitialized","defaultRestInfo","uuid","getDataFromLocalStorage","key","json","localStorage","getItem","err","console","error","alert","setDataToLocalStorage","value","setItem","fetchRestListFromApi","callback","isInitializedChecked","setTimeout","Array","isArray","fetchRestList","arguments","length","undefined","dispatch","setLoading","list","saveRestList","saveRestListToApi","dispatchAndFetchNewRestList","actionType","isSaveInServer","getState","getRestListIfNeed","restaurantList","restList","dispatchAndFetchNewRestListAndSave","resetChoices","type","setRestList","mapChoicesInputsFromRest","rest","filterRestList","isLoading","restaurantsBuilder","this","displayNumber","len","max","maxNum","i","temp","Math","floor","random","includes","push","log","getRandomIntList","map","index","_this","resComponent","randomSelectRest","displayNum","handleDelete","deleteRest","res","Restaurants_Restaurant","assign","Component","propsType","PropTypes","array","isRequired","bool","number","connect","state","ChoiceSelectors","selectorInputCom","onChange","htmlFor","choicesSectionBuilder","handleChoiceSelectorChange","targetType","targetIndex","newChoices","newChoiceData","objectSpread","setChoices","_this2","ChoicesPanel_ChoiceSelectors","choicesPanel","actions","choicesPanelRestInput","labelName","isValid","inputProps","errorMessage","event","placeholder","restInputs","keys","restInfo","resInput","ChoicesPanelRestInput","choicesSubmitInput","disabled","choicesPanelBuilder","handleInfoChange","inputKey","newRestInfo","newValue","target","validateInput","setRestInfo","rules","trimValue","trim","isNaN","parseFloat","isFinite","isValidToSubmit","isAllValid","handleSubmit","e","preventDefault","newRest","match","params","handleEditRest","history","handleCreateRest","resetChoicesAndRestInfo","find","onSubmit","RestInputs","ChoicesSectionBuilder","ChoicesSubmitInput","findPanelBuilder","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","isSelectRest","restId","window","scrollTo","RestaurantsBuilder","basename","process","Layout_Layout","react_router","path","component","FindPanelBuilder","ChoicesPanelBuilder","Boolean","location","hostname","getCheckedList","item","initialState","showInCreationMode","getMappingChoices","targetChoices","checkedChoices","currentData","getMappingRestInfo","getSingleServiceRest","rootReducer","combineReducers","action","tempRest","hasMatch","store","preLoadedState","createStore","applyMiddleware","thunkMiddleware","logger","configureStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15175531.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Toolbar.scss';\n\nconst ToolBar = () => {\n  return (\n    <div className=\"top-bar my-top-bar\">\n      <div className=\"top-bar-left\">\n        <h3 className=\"top-bar-title\">隨便想吃什麼？</h3>\n      </div>\n      <div className=\"top-bar-right\">\n        <ul className=\"menu\">\n          <li><NavLink to=\"/\" exact>吃什麼？</NavLink></li>\n          <li><NavLink to=\"/create-rest\">新增餐廳</NavLink></li>\n          <li><NavLink to=\"/show-all\">餐廳列表</NavLink></li>\n        </ul>\n      </div>\n    </div>\n  )\n};\n\nexport default ToolBar;","import React from 'react';\nimport Toolbar from '../ToolBar/ToolBar';\nimport './Layout.scss';\n\nconst layout = ( props ) => {\n  return (\n    <React.Fragment>\n      <Toolbar></Toolbar>\n      <main className=\"main\">\n        { props.children }\n      </main>\n    </React.Fragment>\n  )\n};\n\nexport default layout;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Restaurant.scss';\n\nconst restaurant = (props) => {\n  return (\n    <div className=\"cell\">\n      <div className=\"card card-size\">\n        <div className=\"card-section\">\n          <p>名稱：{ props.name } </p>\n          <p>電話：{ props.tel ? (<a href={'tel:' + props.tel}>{props.tel}</a>) : null}</p>\n          <p>地址：{ props.address } </p>\n          <p>類型：{ props.choices.join(', ') }</p>\n        </div>\n        <div className=\"grid-x align-center\">\n          <div className=\"small button-group cell small-5\">\n            <button className=\"button alert\" onClick={ () => props.onDelete(props.id) }>刪除</button>\n            <Link to={'/edit/' + props.id} className=\"button\">編輯</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nrestaurant.propTypes = {\n  name: PropTypes.string.isRequired,\n  tel: PropTypes.string,\n  address: PropTypes.string,\n  choices: PropTypes.array,\n  onDelete: PropTypes.func,\n  onEdit: PropTypes.func\n};\n\nexport default restaurant;","/**\n * 放置一些共用的 help function\n *\n * */\n\n\nexport const deepCloneObj = (obj) => JSON.parse(JSON.stringify(obj));\n\nexport const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\n\nexport const getRandomIntList = (len = 3, maxNum) => {\n  let list = [];\n  for (let i = 0; i < len;) {\n    let temp = getRandomInt(maxNum);\n    // 避免遇到重複的 randomInt\n    if (!list.includes(temp)) {\n      list.push(temp);\n      i++\n    }\n  }\n  console.log('list', list);\n  return list;\n};\n\nexport const choicesHelper = {\n  // get service like object for choices\n  getCheckedChoices: (choices) => {\n    // get data structure like ['心情', '天氣熱']\n    return choices.reduce( (checkedList, choices) => {\n      let result = choices.data.filter((choice) => {\n        // find checked object\n        return choice.checked;\n      }).reduce((accList, obj) => {\n        // reduce to one single label\n        return [...accList, obj.label];\n      },[]);\n      // concat all for choices type\n      return [...checkedList, ...result];\n    }, []);\n  }\n};","import uuid from \"uuid/v4\";\n\n/**\n * Get and Save restaurant list using localstorage\n *\n * isInitialized: boolean\n * restInfo: array\n *\n */\n\n// 模擬 call api\nconst TIMEOUT = 1000;\nconst REST_STORE_ID = 'MY-REST-LIST';\nconst INIT_STORE_ID = 'INIT_STORE_ID';\n// 先暫存在此 file 裡面避免一直呼叫\nlet isSiteInitialized = false;\n\nconst defaultRestInfo  = [\n  {\n    id: uuid(),\n    name: '麥當勞',\n    tel: '',\n    choices: ['便宜', '速食', '垃圾食物', '全天', '有外帶']\n  },\n  {\n    id: uuid(),\n    name: 'test2 餐廳',\n    address: '測試的地址要很長測試的地址要很長',\n    choices: []\n  },\n  {\n    id: uuid(),\n    name: 'test333333333333 餐廳',\n    choices: []\n  }\n];\n\nconst getDataFromLocalStorage = (key) => {\n  try {\n    let json = localStorage.getItem(key);\n    return json && JSON.parse(json);\n  } catch (err) {\n    console.error(err);\n    alert('發生錯誤了！please reload the page!');\n    setDataToLocalStorage(REST_STORE_ID, defaultRestInfo);\n  }\n  return '';\n};\n\nconst setDataToLocalStorage = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\nconst isInitializedChecked = () => {\n  if (!isSiteInitialized) {\n      let isInitialized = getDataFromLocalStorage(INIT_STORE_ID);\n      if (!isInitialized) {\n        // set localstorage\n        setDataToLocalStorage(INIT_STORE_ID, true);\n        setDataToLocalStorage(REST_STORE_ID, defaultRestInfo);\n      }\n      isSiteInitialized = true;\n  }\n  return isSiteInitialized;\n};\n\nexport const fetchRestListFromApi = (callback) => {\n  isInitializedChecked();\n  setTimeout(() => {\n    let data = getDataFromLocalStorage(REST_STORE_ID);\n    callback( Array.isArray(data) ? data : [] );\n  }, TIMEOUT)\n};\n\nexport const saveRestListToApi = (list, callback) => {\n  setTimeout(() => {\n    setDataToLocalStorage(REST_STORE_ID, list);\n    callback();\n  }, TIMEOUT)\n};\n","import * as types from '../constants/ActionTypes';\nimport uuid from 'uuid/v4';\nimport { fetchRestListFromApi, saveRestListToApi } from \"../api/restaurantStorage\";\n\nconst fetchRestList = (callback=()=>{}) => {\n  return dispatch => {\n    dispatch(setLoading(true));\n    fetchRestListFromApi((list = []) => {\n      callback(list);\n      dispatch(setLoading(false));\n    });\n  }\n};\n\nconst saveRestList = (list, callback=()=>{}) => {\n  return dispatch => {\n    dispatch(setLoading(true));\n    saveRestListToApi(list, () => {\n      dispatch(setLoading(false));\n      callback();\n    });\n  }\n};\n\nconst dispatchAndFetchNewRestList = (actionType, isSaveInServer ,callback=()=>{}) => {\n  return (dispatch, getState ) => {\n    // fetch list before callback\n    return dispatch(getRestListIfNeed( () => {\n      dispatch(actionType);\n      if (isSaveInServer) {\n        dispatch(saveRestList(getState().restaurantList.restList));\n      }\n      callback();\n    }));\n  };\n};\n\nconst dispatchAndFetchNewRestListAndSave = (actionType, isSaveInServer ,callback) => {\n  return dispatchAndFetchNewRestList(actionType, true, callback);\n};\n\n/*\n* action creator\n* */\nexport const addRest = (rest, history) => {\n  return dispatchAndFetchNewRestListAndSave(\n    { type: types.ADD_REST, rest: {...rest, id: uuid()} },\n    () => {\n      history.push('/');\n    });\n};\n\nexport const editRest = (id, rest, history) => {\n  return dispatchAndFetchNewRestListAndSave(\n    { type: types.EDIT_REST, rest: {...rest, id} },\n    () => {\n      history.push('/');\n    });\n};\n\nexport const deleteRest = id => {\n  return (dispatch, getState ) => {\n      dispatch({ type: types.DELETE_REST, id });\n      return dispatch(saveRestList(getState().restaurantList.restList));\n  };\n};\n\nexport const setChoices = choices => (\n  { type: types.SET_CHOICES, choices }\n);\n\nexport const setRestInputValues = info => (\n  { type: types.SET_REST_INPUT_VALUES, restInfo: info }\n);\n\nexport const resetChoices = () => (\n  { type: types.RESET_ALL_CHOICES}\n);\n\n\nexport const setRestList = (list) => (\n  { type: types.SET_REST_LIST, list }\n);\n\nexport const getRestListIfNeed = (callback=()=>{}) => {\n  return (dispatch) => {\n    return dispatch(fetchRestList( (list) => {\n      dispatch(setRestList(list));\n      callback();\n    }))\n  }\n};\n\nexport const findRestInServer = (id) => {\n  return (dispatch) => {\n    return dispatch(fetchRestList( (list) => {\n      let rest = list.find((temp) => {\n        return temp.id === id;\n      });\n      dispatch(mapChoicesInputsFromRest(rest));\n    }))\n  }\n};\n\nexport const mapChoicesInputsFromRest = (rest) => (\n  { type: types.MAP_CHOICES_INPUTS, rest}\n);\n\nexport const filterRestList = (choices) => {\n  return dispatchAndFetchNewRestList({ type: types.FILTER_REST_LIST, choices });\n};\n\nexport const setLoading = (isLoading) => (\n  { type:types.SET_LOADING, isLoading }\n);","// 餐廳 Actions\nexport const ADD_REST = 'ADD_REST';\nexport const EDIT_REST = 'EDIT_REST';\nexport const DELETE_REST = 'DELETE_REST';\n\n// 餐廳列表 Actions\nexport const SET_REST_LIST = 'SET_REST_LIST';\nexport const SAVE_REST_LIST = 'SAVE_REST_LIST';\nexport const GET_REST_LIST = 'GET_REST_LIST';\nexport const FILTER_REST_LIST = 'FILTER_REST_LIST';\n\n// Choices Actions\nexport const SET_CHOICES = 'SET_CHOICES';\nexport const MAP_CHOICES_INPUTS = 'MAP_CHOICES_INPUTS';\nexport const SET_REST_INPUT_VALUES = 'SET_REST_INPUT_VALUES';\nexport const RESET_ALL_CHOICES = 'RESET_ALL_CHOICES';\n\n// set loading\nexport const SET_LOADING = 'SET_LOADING';","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from 'react-redux'\nimport Restaurant from '../../components/Restaurants/Restaurant';\nimport { getRandomIntList } from '../../utils/utils';\nimport { deleteRest, getRestListIfNeed } from '../../actions/actions';\n\nclass restaurantsBuilder extends Component {\n\n  componentDidMount() {\n    this.props.dispatch(getRestListIfNeed());\n  }\n\n  randomSelectRest(displayNumber) {\n    let len = this.props.restList.length;\n    let list = this.props.restList;\n    // 如果沒有指定要顯示幾筆，或是 list 長度比少指定長度小，直接回傳 list\n    if (!displayNumber || len <= displayNumber) return list;\n\n    return getRandomIntList(displayNumber,len).map((index) => {\n        return list[index];\n    })\n  }\n\n  render() {\n    let resComponent = null;\n    let restList = this.randomSelectRest(this.props.displayNum);\n      let handleDelete = (id) => {\n      this.props.dispatch(deleteRest(id));\n    };\n\n    if (restList.length) {\n      resComponent = restList.map(function (res) {\n        return <Restaurant key={res.id} {...res}\n                           onDelete={ handleDelete }>\n               </Restaurant>;\n      });\n    } else if (this.props.isLoading) {\n      resComponent = <p>Loading...</p>;\n    } else {\n      resComponent = <p>很抱歉，目前沒有適合的餐廳喔！</p>;\n    }\n    return (\n      <div className=\"grid-container\">\n        <div className=\"grid-x grid-padding-x small-up-1 medium-up-2 large-up-3\">\n          {resComponent}\n        </div>\n      </div>\n    )\n  }\n}\n\nrestaurantsBuilder.propsType = {\n  restList: PropTypes.array.isRequired,\n  isLoading: PropTypes.bool,\n  // display the given number of list\n  displayNum: PropTypes.number\n};\n\nconst mapStateToProps = state => ({\n    restList: state.restaurantList.restList,\n    isLoading: state.restaurantList.isLoading\n  }\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(restaurantsBuilder);","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport './ChoicesPanel.scss';\n\nconst ChoiceSelectors  = (props) => {\n\n  let selectorInputCom = props.list.map( (value, index) => {\n    let id = props.type + '_checkbox_'+ index;\n    return (\n      <React.Fragment key={index}>\n        <input id={ id } type=\"checkbox\"\n               checked={ value.checked }\n               onChange={ () => props.onChange(props.type, index) } />\n        <label className=\"button\" htmlFor={ id } >{ value.label }</label>\n      </React.Fragment>\n    )\n  });\n\n  return (\n    <div className=\"grid-x grid-padding-x panel-select\">\n      <div className=\"cell\">\n        <label>{ props.label }</label>\n        { selectorInputCom }\n      </div>\n    </div>\n  )\n};\n\nChoiceSelectors.propTypes = {\n  type: PropTypes.string,\n  list: PropTypes.array,\n  label: PropTypes.string,\n  onChange: PropTypes.func\n};\n\nexport default ChoiceSelectors;","import React, { Component } from 'react';\nimport ChoiceSelectors from \"../../components/ChoicesPanel/ChoiceSelectors\";\nimport {connect} from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\n\nclass choicesSectionBuilder extends Component {\n\n  // 當選擇面板的按鈕被點擊\n  handleChoiceSelectorChange = (targetType, targetIndex) => {\n    const newChoices = this.props.choices.map((choice) => {\n      // find target choice by type\n      if ( choice.type === targetType ) {\n        // update data by targetIndex, if not target, return original value\n        let newChoiceData = choice.data.map( (value, i) => {\n          return targetIndex !== i ? value: {...value, checked: !value.checked};\n        });\n        return {...choice, data: newChoiceData};\n      }\n      // not target choice, return original one\n      return choice;\n    });\n    this.props.setChoices(newChoices);\n  };\n\n  render() {\n    return (\n      <div>\n        {\n          this.props.choices.map((choice, index) => {\n            return <ChoiceSelectors key={ index }\n                                    type={ choice.type }\n                                    list={ choice.data }\n                                    onChange={ this.handleChoiceSelectorChange }\n                                    label={ choice.label }>\n            </ChoiceSelectors>;\n          })\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  choices: state.choicesPanel.choices\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setChoices: (choices) => {\n    dispatch(actions.setChoices(choices));\n  }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(choicesSectionBuilder);","import React from 'react';\nimport './ChoicesPanel.scss';\n\nconst choicesPanelRestInput = (props) => {\n  let labelName = 'res_' + props.id;\n  return (\n    <div className=\"cell\">\n      <label htmlFor={ labelName }>{ props.label }\n        { props.isValid ? null : <span className=\"form-error show\">{ props.inputProps.errorMessage }</span> }\n      </label>\n      <input type={ props.inputProps.type }\n             name={ labelName } id={ labelName } value={ props.value }\n             onChange={ (event) => props.onChange(event, props.id) }\n             placeholder={props.inputProps.placeholder} />\n    </div>\n   )\n};\n\nexport default choicesPanelRestInput;","import React from 'react';\nimport ChoicesPanelRestInput from \"./ChoicesPanelRestInput\";\n\nconst restInputs = (props) => {\n  return (\n    <div className=\"grid-x grid-padding-x\">\n      {\n        Object.keys(props.restInfo).map((key, index) => {\n          let resInput = {...props.restInfo[key], id: key};\n          return (\n            <ChoicesPanelRestInput\n              key={ index } {...resInput}\n              onChange={ props.onChange }>\n            </ChoicesPanelRestInput>)\n        })\n      }\n    </div>\n  )\n};\n\nexport default restInputs;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst choicesSubmitInput = (props) => {\n  return (\n    <div className=\"grid-x grid-padding-x align-center submit-button\">\n      <fieldset className=\"cell\">\n        <button\n          className=\"button small expanded\"\n          type=\"submit\" value=\"Submit\"\n          onClick={ () => { props.onClick && props.onClick() } }\n          disabled={ props.disabled }>送出</button>\n      </fieldset>\n    </div>\n  )\n};\n\nchoicesSubmitInput.propTypes = {\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool\n};\n\nexport default choicesSubmitInput;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport ChoicesSectionBuilder from './ChoicesSectionBuilder';\nimport RestInputs from '../../components/ChoicesPanel/RestInputs';\nimport ChoicesSubmitInput from '../../components/ChoicesPanel/ChoicesSubmitInput';\nimport * as actions from \"../../actions/actions\";\nimport { choicesHelper } from \"../../utils/utils\";\nimport './ChoicesPanelBuilder.scss';\n\nclass choicesPanelBuilder extends Component {\n\n  componentWillMount() {\n    // if edit, get rest from server first\n    if (this.props.match.params.id) {\n      this.props.dispatch(actions.findRestInServer(this.props.match.params.id));\n    }\n  }\n\n  handleInfoChange = (event, inputKey) => {\n    let newRestInfo = {...this.props.restInfo};\n    let newValue = event.target.value;\n    let isValid = this.validateInput(newValue, newRestInfo[inputKey]);\n    newRestInfo[inputKey] = { ...newRestInfo[inputKey], value: newValue, isValid: isValid};\n    this.props.setRestInfo(newRestInfo);\n  };\n\n  validateInput = (value, rules) => {\n    let isValid = true;\n    // trim empty space\n    let trimValue = value.trim();\n    // 檢查是否 required\n    if (rules.isRequired) {\n        isValid = trimValue !== '';\n    }\n    // 簡單檢查 tel input 是否是 number\n    if (rules.inputProps.type === 'tel') {\n        isValid = (!isNaN(parseFloat(trimValue)) && isFinite(trimValue)) || (trimValue === '');\n    }\n    return isValid;\n  };\n\n  // 檢查全部的 valid state, 如果有 Invalid 情形，return false\n  isValidToSubmit = () => {\n    return Object.keys(this.props.restInfo).reduce((isAllValid, key)=> {\n      return this.props.restInfo[key].isValid && isAllValid;\n    }, true);\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.isValidToSubmit()) {\n      alert('資料有誤！不能新增！');\n      return;\n    }\n    let newRest = {\n      name: this.props.restInfo.name.value,\n      tel: this.props.restInfo.tel.value,\n      address: this.props.restInfo.address.value,\n      choices: choicesHelper.getCheckedChoices(this.props.choices)\n    };\n    // edit mode\n    if (this.props.match.params.id) {\n      // pass id\n      this.props.handleEditRest(this.props.match.params.id, newRest, this.props.history);\n    } else {\n      // in creation mode\n      this.props.handleCreateRest(newRest, this.props.history);\n    }\n    //reset all panel choices deeply\n    this.props.resetChoicesAndRestInfo();\n  };\n\n  render() {\n    return (\n        <div className=\"main-selector-panel\">\n          <form onSubmit={ (e) => this.handleSubmit(e) }>\n            <RestInputs restInfo={this.props.restInfo} onChange={ this.handleInfoChange } />\n            <ChoicesSectionBuilder />\n            <ChoicesSubmitInput disabled={ !this.isValidToSubmit() } />\n          </form>\n        </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n  choices: state.choicesPanel.choices,\n  restInfo: state.choicesPanel.restInfo\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // pass router history make sure change page after all async call\n  handleCreateRest: (rest, history) => {\n    dispatch(actions.addRest(rest, history))\n  },\n  handleEditRest: (id, rest, history) => {\n    dispatch(actions.editRest(id, rest, history))\n  },\n  setRestInfo: (restInfo) => {\n    dispatch(actions.setRestInputValues(restInfo));\n  },\n  resetChoicesAndRestInfo: () => {\n    dispatch(actions.resetChoices())\n  },\n  dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(choicesPanelBuilder);","import React, { Component } from 'react';\nimport ChoicesSectionBuilder from '../ChoicesPanelBuilder/ChoicesSectionBuilder';\nimport '../ChoicesPanelBuilder/ChoicesPanelBuilder.scss';\nimport { connect } from 'react-redux';\nimport ChoicesSubmitInput from '../../components/ChoicesPanel/ChoicesSubmitInput';\nimport * as actions from '../../actions/actions';\nimport {choicesHelper, getRandomIntList} from '../../utils/utils';\nimport RestaurantsBuilder from '../RestaurantsBuilder/RestaurantsBuilder';\nimport { getRestListIfNeed } from \"../../actions/actions\";\n\nclass findPanelBuilder extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {isSelectRest: false, restId: Math.random()};\n  }\n\n  componentWillMount() {\n    this.props.dispatch(getRestListIfNeed());\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let choices = choicesHelper.getCheckedChoices(this.props.choices);\n    if (choices.length !== 0) {\n      this.props.dispatch(actions.filterRestList(choices));\n      this.props.dispatch(actions.resetChoices());\n      this.setState({isSelectRest: true});\n    } else {\n      // force rerender 髒髒！\n      this.setState({isSelectRest: false, restId: Math.random()});\n    }\n    // scroll to top\n    window.scrollTo(0, 0);\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n          <div>\n            <span>{ this.state.isSelectRest ? '篩選結果':'隨便挑三個給你'}：</span>\n            <div>\n              <RestaurantsBuilder displayNum={3} id={this.state.restId}/>\n            </div>\n          </div>\n          <div>或是在下面篩選：（無篩選=隨機再選擇）</div>\n          <div className=\"main-selector-panel\">\n            <ChoicesSectionBuilder />\n            <ChoicesSubmitInput />\n          </div>\n        </form>\n      </div>\n    )\n  };\n}\n\nconst mapStateToProps = state => ({\n  restList: state.restaurantList.restList,\n  choices: state.choicesPanel.choices\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(findPanelBuilder);","import React from 'react';\nimport Layout from './components/Layout/Layout.js';\nimport RestaurantsBuilder from './containers/RestaurantsBuilder/RestaurantsBuilder';\nimport ChoicesPanelBuilder from './containers/ChoicesPanelBuilder/ChoicesPanelBuilder';\nimport FindPanelBuilder from './containers/FindPanelBuilder/FindPanelBuilder';\nimport {connect} from 'react-redux';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.scss';\n\nfunction App(props) {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div>\n        <Layout>\n          <Route path=\"/\" exact component={ FindPanelBuilder }></Route>\n          <Route path=\"/show-all\" exact component={ RestaurantsBuilder }></Route>\n          <Route path=\"/create-rest\" exact component={ ChoicesPanelBuilder }></Route>\n          <Route path=\"/edit/:id\" exact component={ ChoicesPanelBuilder }></Route>\n        </Layout>\n      </div>\n      <div className={ 'is-loading ' + (props.isLoading && 'is-visible') }>\n        <div className=\"sp sp-circle\"></div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nconst mapStateToProps = state => ({\n    isLoading: state.restaurantList.isLoading\n  }\n);\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_CHOICES,\n         RESET_ALL_CHOICES,\n         SET_REST_INPUT_VALUES,\n         MAP_CHOICES_INPUTS,\n} from '../constants/ActionTypes';\nimport { deepCloneObj } from '../utils/utils';\n\n// return choices mapping for UI { label, checked }\nconst getCheckedList = (list) => {\n  return list.map((item) => {\n    return {\n      label: item,\n      checked: false\n    }\n  })\n};\n\nconst initialState = {\n  choices: [{\n      type: 'RES_PRICE',\n      label: '價格',\n      data: getCheckedList(['便宜', '還可以', '貴'])\n    },\n    {\n      type: 'RES_STYLE',\n      label: '風格',\n      data: getCheckedList(['中式', '火鍋', '西式', '日式', '異國料理', '便當', '麵店', '速食', '素食', '小吃', '早餐店', '垃圾食物'])\n    },\n    {\n      type: 'RES_TIME',\n      label: '時間',\n      data: getCheckedList(['全天', '早餐', '中餐', '晚餐', '宵夜'])\n    },\n    {\n      type: 'RES_MODE',\n      label: '心情',\n      data: getCheckedList(['有湯', '無湯', '天氣熱想吃', '天氣冷想吃', '有服務費', '無服務費', '聚餐', '有酒', '有外帶'])\n    }\n  ],\n  restInfo: {\n    name: {\n      value: '',\n        label: '*名稱',\n        inputProps: {\n          type: 'text',\n          placeholder: '請輸入餐廳名稱...',\n          errorMessage: '此欄位為必填'\n      },\n      isValid: false,\n        isRequired: true,\n        showInCreationMode: true\n    },\n    tel: {\n      value: '',\n        label: '電話',\n        inputProps: {\n          type: 'tel',\n          placeholder: '請輸入餐廳電話...',\n          errorMessage: '此欄位必須為數字'\n      },\n      isValid: true,\n        isRequired: false,\n        showInCreationMode: false\n    },\n    address: {\n      value: '',\n        label: '地址',\n        inputProps: {\n          type: 'text',\n          placeholder: '請輸入餐廳地址...'\n      },\n      isValid: true,\n        isRequired: false,\n        showInCreationMode: false\n    }\n  }\n};\n\n/***\n * 回傳 UI choices list initialState form service choices data\n *\n * ['天氣熱', '西式'] -> [{choices: type, label, choices}]\n *\n */\nconst getMappingChoices = (targetChoices = []) => {\n  let newChoices = [...deepCloneObj(initialState.choices)];\n  // 回傳 UI choices list initialState form service choices data\n  return newChoices.map( (choice) => {\n    let checkedChoices = choice.data.map((currentData) => {\n      currentData.checked = targetChoices.includes(currentData.label);\n      return {...currentData};\n    });\n    return {...choice, data: checkedChoices }\n  })\n};\n\nconst getMappingRestInfo = (rest) => {\n  let newRestInfo = {...deepCloneObj(initialState.restInfo)};\n  newRestInfo.name.value = rest.name || '';\n  newRestInfo.name.isValid = true;\n  newRestInfo.tel.value = rest.tel || '';\n  newRestInfo.address.value = rest.address || '';\n  return newRestInfo;\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CHOICES:\n      return { ...state, choices: action.choices };\n    case SET_REST_INPUT_VALUES:\n      return {...state, restInfo: action.restInfo };\n    case RESET_ALL_CHOICES:\n      return {...deepCloneObj(initialState)};\n    // return a mapping state of edit rest obj\n    case MAP_CHOICES_INPUTS:\n      return {\n        restInfo: getMappingRestInfo(action.rest),\n        choices: getMappingChoices(action.rest.choices)\n      };\n    default:\n      return state;\n  }\n};","import * as actionTypes from '../constants/ActionTypes';\n\n// use fake one now\nconst initialState = {\n  isLoading: false,\n  restList: []\n};\n\nconst getSingleServiceRest = (rest) => {\n  return {\n    id: rest.id,\n    name: rest.name,\n    tel: rest.tel,\n    address: rest.address,\n    choices: rest.choices\n  }\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_REST:\n      return {...state, restList: [...state.restList, getSingleServiceRest(action.rest)]};\n    case actionTypes.EDIT_REST:\n      return {...state, restList: state.restList.map((tempRest)=> {\n        return (action.rest.id === tempRest.id ? getSingleServiceRest(action.rest) : tempRest);\n      })};\n    case actionTypes.DELETE_REST:\n      return {...state, restList: state.restList.filter(res =>\n          res.id !== action.id\n        )};\n    case actionTypes.GET_REST_LIST:\n      return state;\n    case actionTypes.SET_REST_LIST:\n      return {...state, restList: action.list};\n    case actionTypes.FILTER_REST_LIST:\n      return {...state, restList: state.restList.filter(res => {\n          // return list if this res match one of choices\n          return res.choices.reduce( (hasMatch, choice) => {\n            return hasMatch || action.choices.includes(choice);\n          }, false);\n        })};\n    case actionTypes.SET_LOADING:\n        return {...state, isLoading: action.isLoading};\n    default:\n      return state;\n  }\n};","import { combineReducers } from 'redux';\nimport choicesPanel from './choicesPanel';\nimport restaurantList from './restaurantList';\n\nconst rootReducer = combineReducers({\n  choicesPanel,\n  restaurantList\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './stores/configureStore';\nimport { Provider } from 'react-redux';\n\nlet store = configureStore();\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from '../reducers/rootReducer';\n\nlet configureStore = ( preLoadedState ) => {\n  return createStore(\n    rootReducer,\n    preLoadedState,\n    applyMiddleware(\n      thunkMiddleware,\n      logger\n    )\n  )\n};\n\nexport default configureStore;"],"sourceRoot":""}