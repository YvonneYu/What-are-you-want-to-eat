{"version":3,"sources":["components/ToolBar/ToolBar.js","components/Layout/Layout.js","components/Restaurants/Restaurant.js","components/Restaurants/Restaurants.js","api/restaurantStorage.js","actions/actions.js","constants/ActionTypes.js","containers/RestaurantsBuilder/RestaurantsBuilder.js","components/ChoicesPanel/ChoiceSelectors.js","containers/ChoicesPanelBuilder/ChoicesSectionBuilder.js","components/ChoicesPanel/ChoicesPanelRestInput.js","components/ChoicesPanel/RestInputs.js","components/ChoicesPanel/ChoicesSubmitInput.js","utils/utils.js","containers/ChoicesPanelBuilder/ChoicesPanelBuilder.js","containers/FindPanelBuilder/FindPanelBuilder.js","App.js","serviceWorker.js","reducers/choicesPanel.js","reducers/restaurantList.js","reducers/rootReducer.js","index.js","stores/configureStore.js"],"names":["ToolBar","react_default","a","createElement","className","react_router_dom","to","exact","layout","props","Fragment","components_ToolBar_ToolBar","children","restaurant","name","tel","href","address","choices","join","hideEditBtns","onClick","onDelete","id","restaurants","restList","map","res","Restaurants_Restaurant","Object","assign","key","handleRestDelete","isSiteInitialized","defaultRestInfo","uuid","getDataFromLocalStorage","json","localStorage","getItem","JSON","parse","err","console","error","alert","setDataToLocalStorage","value","setItem","stringify","fetchRestListFromApi","callback","isInitializedChecked","setTimeout","data","Array","isArray","fetchRestList","arguments","length","undefined","dispatch","setLoading","list","saveRestList","saveRestListToApi","dispatchAndFetchNewRestList","actionType","isSaveInServer","getState","getRestListIfNeed","restaurantList","dispatchAndFetchNewRestListAndSave","deleteRest","type","resetChoices","setRestList","mapChoicesInputsFromRest","rest","filterRestList","isLoading","restaurantsBuilder","this","Restaurants","Component","propsType","PropTypes","array","isRequired","bool","connect","state","ChoiceSelectors","selectorInputCom","index","checked","onChange","htmlFor","label","choicesSectionBuilder","handleChoiceSelectorChange","targetType","targetIndex","newChoices","_this","choice","newChoiceData","i","objectSpread","setChoices","_this2","ChoicesPanel_ChoiceSelectors","choicesPanel","actions","choicesPanelRestInput","labelName","isValid","inputProps","errorMessage","event","placeholder","restInputs","keys","restInfo","resInput","ChoicesPanelRestInput","choicesSubmitInput","disabled","deepCloneObj","obj","choicesHelper","getCheckedChoices","reduce","checkedList","result","filter","accList","concat","toConsumableArray","choicesPanelBuilder","handleInfoChange","inputKey","newRestInfo","newValue","target","validateInput","setRestInfo","rules","trimValue","trim","isNaN","parseFloat","isFinite","isValidToSubmit","isAllValid","handleSubmit","e","preventDefault","newRest","match","params","handleEditRest","history","handleCreateRest","resetChoicesAndRestInfo","find","temp","onSubmit","RestInputs","ChoicesSectionBuilder","ChoicesSubmitInput","push","findPanelBuilder","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","isSelectRest","selectedList","randomSelectRest","window","scrollTo","displayNumber","len","max","maxNum","Math","floor","random","includes","getRandomIntList","basename","process","Layout_Layout","react_router","path","component","FindPanelBuilder","RestaurantsBuilder","ChoicesPanelBuilder","Boolean","location","hostname","getCheckedList","item","initialState","showInCreationMode","getMappingChoices","targetChoices","checkedChoices","currentData","getMappingRestInfo","getSingleServiceRest","rootReducer","combineReducers","action","tempRest","hasMatch","store","preLoadedState","createStore","applyMiddleware","thunkMiddleware","logger","configureStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8875211.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Toolbar.scss';\n\nconst ToolBar = () => {\n  return (\n    <div className=\"top-bar my-top-bar\">\n      <div className=\"top-bar-left\">\n        <h3 className=\"top-bar-title\">隨便想吃什麼？</h3>\n      </div>\n      <div className=\"top-bar-right\">\n        <ul className=\"menu\">\n          <li><NavLink to=\"/\" exact>吃什麼？</NavLink></li>\n          <li><NavLink to=\"/create-rest\">新增餐廳</NavLink></li>\n          <li><NavLink to=\"/show-all\">餐廳列表</NavLink></li>\n        </ul>\n      </div>\n    </div>\n  )\n};\n\nexport default ToolBar;","import React from 'react';\nimport Toolbar from '../ToolBar/ToolBar';\nimport './Layout.scss';\n\nconst layout = ( props ) => {\n  return (\n    <React.Fragment>\n      <Toolbar></Toolbar>\n      <main className=\"main\">\n        { props.children }\n      </main>\n    </React.Fragment>\n  )\n};\n\nexport default layout;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Restaurant.scss';\n\nconst restaurant = (props) => {\n  return (\n    <div className=\"cell\">\n      <div className=\"card card-size\">\n        <div className=\"card-section\">\n          <p>名稱：{ props.name } </p>\n          <p>電話：{ props.tel ? (<a href={'tel:' + props.tel}>{props.tel}</a>) : null}</p>\n          <p>地址：{ props.address } </p>\n          <p>類型：{ props.choices.join(', ') }</p>\n        </div>\n        {\n          props.hideEditBtns ? null :\n            <div className=\"grid-x align-center\">\n              <div className=\"small button-group cell small-5\">\n                <button className=\"button alert\" onClick={ () => props.onDelete(props.id) }>刪除</button>\n                <Link to={'/edit/' + props.id} className=\"button\">編輯</Link>\n              </div>\n            </div>\n        }\n      </div>\n    </div>\n  )\n};\n\nrestaurant.propTypes = {\n  name: PropTypes.string.isRequired,\n  tel: PropTypes.string,\n  address: PropTypes.string,\n  choices: PropTypes.array,\n  onDelete: PropTypes.func,\n  onEdit: PropTypes.func\n};\n\nexport default restaurant;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Restaurant from './Restaurant';\n\n\nconst restaurants = (props) => {\n  return(\n    <div className=\"grid-container\">\n      <div className=\"grid-x grid-padding-x small-up-1 medium-up-2 large-up-3\">\n        {props.restList.map(function (res) {\n          return <Restaurant key={res.id} {...res} hideEditBtns={ props.hideEditBtns }\n                             onDelete={props.handleRestDelete}>\n          </Restaurant>;\n        })}\n      </div>\n    </div>\n  )\n};\n\nrestaurants.propTypes = {\n  restList: PropTypes.array,\n  handleRestDelete: PropTypes.func,\n  hideEditBtns: PropTypes.bool\n};\n\nexport default restaurants;","import uuid from \"uuid/v4\";\n\n/**\n * Get and Save restaurant list using localstorage\n *\n * isInitialized: boolean\n * restInfo: array\n *\n */\n\n// 模擬 call api\nconst TIMEOUT = 1000;\nconst REST_STORE_ID = 'MY-REST-LIST';\nconst INIT_STORE_ID = 'INIT_STORE_ID';\n// 先暫存在此 file 裡面避免一直呼叫\nlet isSiteInitialized = false;\n\nconst defaultRestInfo  = [\n  {\n    id: uuid(),\n    name: '麥當勞',\n    tel: '',\n    choices: ['便宜', '速食', '垃圾食物', '全天', '有外帶']\n  },\n  {\n    id: uuid(),\n    name: '便利商店',\n    address: '',\n    choices: ['便宜', '全天', '方便']\n  },\n  {\n    id: uuid(),\n    name: 'Default 餐廳',\n    tel: '021234567',\n    address:'Default 地址',\n    choices: ['異國料理']\n  }\n];\n\nconst getDataFromLocalStorage = (key) => {\n  try {\n    let json = localStorage.getItem(key);\n    return json && JSON.parse(json);\n  } catch (err) {\n    console.error(err);\n    alert('發生錯誤了！please reload the page!');\n    setDataToLocalStorage(REST_STORE_ID, defaultRestInfo);\n  }\n  return '';\n};\n\nconst setDataToLocalStorage = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\nconst isInitializedChecked = () => {\n  if (!isSiteInitialized) {\n      let isInitialized = getDataFromLocalStorage(INIT_STORE_ID);\n      if (!isInitialized) {\n        // set localstorage\n        setDataToLocalStorage(INIT_STORE_ID, true);\n        setDataToLocalStorage(REST_STORE_ID, defaultRestInfo);\n      }\n      isSiteInitialized = true;\n  }\n  return isSiteInitialized;\n};\n\nexport const fetchRestListFromApi = (callback) => {\n  isInitializedChecked();\n  setTimeout(() => {\n    let data = getDataFromLocalStorage(REST_STORE_ID);\n    callback( Array.isArray(data) ? data : [] );\n  }, TIMEOUT)\n};\n\nexport const saveRestListToApi = (list, callback) => {\n  setTimeout(() => {\n    setDataToLocalStorage(REST_STORE_ID, list);\n    callback();\n  }, TIMEOUT)\n};\n","import * as types from '../constants/ActionTypes';\nimport uuid from 'uuid/v4';\nimport { fetchRestListFromApi, saveRestListToApi } from \"../api/restaurantStorage\";\n\nconst fetchRestList = (callback=()=>{}) => {\n  return dispatch => {\n    dispatch(setLoading(true));\n    fetchRestListFromApi((list = []) => {\n      callback(list);\n      dispatch(setLoading(false));\n    });\n  }\n};\n\nconst saveRestList = (list, callback=()=>{}) => {\n  return dispatch => {\n    dispatch(setLoading(true));\n    saveRestListToApi(list, () => {\n      dispatch(setLoading(false));\n      callback();\n    });\n  }\n};\n\nconst dispatchAndFetchNewRestList = (actionType, isSaveInServer ,callback=()=>{}) => {\n  return (dispatch, getState ) => {\n    // fetch list before callback\n    return dispatch(getRestListIfNeed( () => {\n      dispatch(actionType);\n      if (isSaveInServer) {\n        dispatch(saveRestList(getState().restaurantList.restList));\n      }\n      callback();\n    }));\n  };\n};\n\nconst dispatchAndFetchNewRestListAndSave = (actionType ,callback) => {\n  return dispatchAndFetchNewRestList(actionType, true, callback);\n};\n\n/*\n* action creator\n* */\nexport const addRest = (rest, history) => {\n  return dispatchAndFetchNewRestListAndSave(\n    { type: types.ADD_REST, rest: {...rest, id: uuid()} },\n    () => {\n      history.push('/');\n    });\n};\n\nexport const editRest = (id, rest, history) => {\n  return dispatchAndFetchNewRestListAndSave(\n    { type: types.EDIT_REST, rest: {...rest, id} },\n    () => {\n      history.push('/');\n    });\n};\n\nexport const deleteRest = id => {\n  return (dispatch, getState ) => {\n      dispatch({ type: types.DELETE_REST, id });\n      return dispatch(saveRestList(getState().restaurantList.restList));\n  };\n};\n\nexport const setChoices = choices => (\n  { type: types.SET_CHOICES, choices }\n);\n\nexport const setRestInputValues = info => (\n  { type: types.SET_REST_INPUT_VALUES, restInfo: info }\n);\n\nexport const resetChoices = () => (\n  { type: types.RESET_ALL_CHOICES}\n);\n\n\nexport const setRestList = (list) => (\n  { type: types.SET_REST_LIST, list }\n);\n\nexport const getRestListIfNeed = (callback=()=>{}) => {\n  return (dispatch) => {\n    return dispatch(fetchRestList( (list) => {\n      dispatch(setRestList(list));\n      callback();\n    }))\n  }\n};\n\nexport const findRestInServer = (id) => {\n  return (dispatch) => {\n    return dispatch(fetchRestList( (list) => {\n      let rest = list.find((temp) => {\n        return temp.id === id;\n      });\n      dispatch(mapChoicesInputsFromRest(rest));\n    }))\n  }\n};\n\nexport const mapChoicesInputsFromRest = (rest) => (\n  { type: types.MAP_CHOICES_INPUTS, rest}\n);\n\nexport const filterRestList = (choices) => {\n  return dispatchAndFetchNewRestList({ type: types.FILTER_REST_LIST, choices });\n};\n\nexport const setLoading = (isLoading) => (\n  { type:types.SET_LOADING, isLoading }\n);","// 餐廳 Actions\nexport const ADD_REST = 'ADD_REST';\nexport const EDIT_REST = 'EDIT_REST';\nexport const DELETE_REST = 'DELETE_REST';\n\n// 餐廳列表 Actions\nexport const SET_REST_LIST = 'SET_REST_LIST';\nexport const SAVE_REST_LIST = 'SAVE_REST_LIST';\nexport const GET_REST_LIST = 'GET_REST_LIST';\nexport const FILTER_REST_LIST = 'FILTER_REST_LIST';\n\n// Choices Actions\nexport const SET_CHOICES = 'SET_CHOICES';\nexport const MAP_CHOICES_INPUTS = 'MAP_CHOICES_INPUTS';\nexport const SET_REST_INPUT_VALUES = 'SET_REST_INPUT_VALUES';\nexport const RESET_ALL_CHOICES = 'RESET_ALL_CHOICES';\n\n// set loading\nexport const SET_LOADING = 'SET_LOADING';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport Restaurants from '../../components/Restaurants/Restaurants';\nimport { deleteRest, getRestListIfNeed } from '../../actions/actions';\n\nclass restaurantsBuilder extends Component {\n\n  componentDidMount() {\n    this.props.dispatch(getRestListIfNeed());\n  }\n\n  render() {\n    let resComponent = null;\n    if (this.props.restList.length) {\n      resComponent = <Restaurants restList={ this.props.restList } handleRestDelete={ this.props.handleRestDelete } />\n    // 下方顯示無 Rest 的情況\n    } else if (this.props.isLoading) {\n      resComponent = <p>Loading...</p>;\n    } else {\n      resComponent = <p>很抱歉，目前沒有適合的餐廳喔！</p>;\n    }\n    return (\n      resComponent\n    )\n  }\n}\n\nrestaurantsBuilder.propsType = {\n  restList: PropTypes.array.isRequired,\n  isLoading: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n    restList: state.restaurantList.restList,\n    isLoading: state.restaurantList.isLoading\n  }\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleRestDelete: (id) => {\n      dispatch(deleteRest(id));\n  },\n  dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(restaurantsBuilder);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ChoicesPanel.scss';\n\nconst ChoiceSelectors  = (props) => {\n\n  let selectorInputCom = props.list.map( (value, index) => {\n    let id = props.type + '_checkbox_'+ index;\n    return (\n      <React.Fragment key={index}>\n        <input id={ id } type=\"checkbox\"\n               checked={ value.checked }\n               onChange={ () => props.onChange(props.type, index) } />\n        <label className=\"button\" htmlFor={ id } >{ value.label }</label>\n      </React.Fragment>\n    )\n  });\n\n  return (\n    <div className=\"grid-x grid-padding-x panel-select\">\n      <div className=\"cell\">\n        <label>{ props.label }</label>\n        { selectorInputCom }\n      </div>\n    </div>\n  )\n};\n\nChoiceSelectors.propTypes = {\n  type: PropTypes.string,\n  list: PropTypes.array,\n  label: PropTypes.string,\n  onChange: PropTypes.func\n};\n\nexport default ChoiceSelectors;","import React, { Component } from 'react';\nimport ChoiceSelectors from '../../components/ChoicesPanel/ChoiceSelectors';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from \"../../actions/actions\";\n\nclass choicesSectionBuilder extends Component {\n\n  // 當選擇面板的按鈕被點擊\n  handleChoiceSelectorChange = (targetType, targetIndex) => {\n    const newChoices = this.props.choices.map((choice) => {\n      // find target choice by type\n      if ( choice.type === targetType ) {\n        // update data by targetIndex, if not target, return original value\n        let newChoiceData = choice.data.map( (value, i) => {\n          return targetIndex !== i ? value: {...value, checked: !value.checked};\n        });\n        return {...choice, data: newChoiceData};\n      }\n      // not target choice, return original one\n      return choice;\n    });\n    this.props.setChoices(newChoices);\n  };\n\n  render() {\n    return (\n      <div>\n        {\n          this.props.choices.map((choice, index) => {\n            return <ChoiceSelectors key={ index }\n                                    type={ choice.type }\n                                    list={ choice.data }\n                                    onChange={ this.handleChoiceSelectorChange }\n                                    label={ choice.label }>\n            </ChoiceSelectors>;\n          })\n        }\n      </div>\n    )\n  }\n}\n\nchoicesSectionBuilder.propTypes = {\n  choices: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  choices: state.choicesPanel.choices\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setChoices: (choices) => {\n    dispatch(actions.setChoices(choices));\n  }\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(choicesSectionBuilder);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ChoicesPanel.scss';\n\nconst choicesPanelRestInput = (props) => {\n  let labelName = 'res_' + props.id;\n  return (\n    <div className=\"cell\">\n      <label htmlFor={ labelName }>{ props.label }\n        { props.isValid ? null : <span className=\"form-error show\">{ props.inputProps.errorMessage }</span> }\n      </label>\n      <input type={ props.inputProps.type }\n             name={ labelName } id={ labelName } value={ props.value }\n             onChange={ (event) => props.onChange(event, props.id) }\n             placeholder={props.inputProps.placeholder} />\n    </div>\n   )\n};\n\nchoicesPanelRestInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  isValid: PropTypes.bool,\n  onChange: PropTypes.func,\n  inputProps: {\n    type: PropTypes.string,\n    placeholder: PropTypes.string,\n    errorMessage: PropTypes.string\n  }\n};\n\nexport default choicesPanelRestInput;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChoicesPanelRestInput from './ChoicesPanelRestInput';\n\nconst restInputs = (props) => {\n  return (\n    <div className=\"grid-x grid-padding-x\">\n      {\n        Object.keys(props.restInfo).map((key, index) => {\n          let resInput = {...props.restInfo[key], id: key};\n          return (\n            <ChoicesPanelRestInput\n              key={ index } {...resInput}\n              onChange={ props.onChange }>\n            </ChoicesPanelRestInput>)\n        })\n      }\n    </div>\n  )\n};\n\nrestInputs.propTypes = {\n  restInfo: PropTypes.object,\n  onChange: PropTypes.func\n};\n\nexport default restInputs;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst choicesSubmitInput = (props) => {\n  return (\n    <div className=\"grid-x grid-padding-x align-center submit-button\">\n      <fieldset className=\"cell\">\n        <button\n          className=\"button small expanded\"\n          type=\"submit\" value=\"Submit\"\n          onClick={ () => { props.onClick && props.onClick() } }\n          disabled={ props.disabled }>送出</button>\n      </fieldset>\n    </div>\n  )\n};\n\nchoicesSubmitInput.propTypes = {\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool\n};\n\nexport default choicesSubmitInput;","/**\n * 放置一些共用的 help function\n *\n * */\n\n\nexport const deepCloneObj = (obj) => JSON.parse(JSON.stringify(obj));\n\nexport const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\n\nexport const getRandomIntList = (len = 3, maxNum) => {\n  let list = [];\n  for (let i = 0; i < len;) {\n    let temp = getRandomInt(maxNum);\n    // 避免遇到重複的 randomInt\n    if (!list.includes(temp)) {\n      list.push(temp);\n      i++\n    }\n  }\n  return list;\n};\n\nexport const choicesHelper = {\n  // get service like object for choices\n  getCheckedChoices: (choices) => {\n    // get data structure like ['心情', '天氣熱']\n    return choices.reduce( (checkedList, choices) => {\n      let result = choices.data.filter((choice) => {\n        // find checked object\n        return choice.checked;\n      }).reduce((accList, obj) => {\n        // reduce to one single label\n        return [...accList, obj.label];\n      },[]);\n      // concat all for choices type\n      return [...checkedList, ...result];\n    }, []);\n  }\n};","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ChoicesSectionBuilder from './ChoicesSectionBuilder';\nimport RestInputs from '../../components/ChoicesPanel/RestInputs';\nimport ChoicesSubmitInput from '../../components/ChoicesPanel/ChoicesSubmitInput';\nimport * as actions from \"../../actions/actions\";\nimport { choicesHelper } from \"../../utils/utils\";\nimport './ChoicesPanelBuilder.scss';\n\nclass choicesPanelBuilder extends Component {\n\n  componentWillMount() {\n    // if edit, get rest from server first\n    if (this.props.match.params.id) {\n      this.props.dispatch(actions.findRestInServer(this.props.match.params.id));\n    }\n  }\n\n  handleInfoChange = (event, inputKey) => {\n    let newRestInfo = {...this.props.restInfo};\n    let newValue = event.target.value;\n    let isValid = this.validateInput(newValue, newRestInfo[inputKey]);\n    newRestInfo[inputKey] = { ...newRestInfo[inputKey], value: newValue, isValid: isValid};\n    this.props.setRestInfo(newRestInfo);\n  };\n\n  validateInput = (value, rules) => {\n    let isValid = true;\n    // trim empty space\n    let trimValue = value.trim();\n    // 檢查是否 required\n    if (rules.isRequired) {\n        isValid = trimValue !== '';\n    }\n    // 簡單檢查 tel input 是否是 number\n    if (rules.inputProps.type === 'tel') {\n        isValid = (!isNaN(parseFloat(trimValue)) && isFinite(trimValue)) || (trimValue === '');\n    }\n    return isValid;\n  };\n\n  // 檢查全部的 valid state, 如果有 Invalid 情形，return false\n  isValidToSubmit = () => {\n    return Object.keys(this.props.restInfo).reduce((isAllValid, key)=> {\n      return this.props.restInfo[key].isValid && isAllValid;\n    }, true);\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (!this.isValidToSubmit()) {\n      alert('資料有誤！不能新增！');\n      return;\n    }\n    let newRest = {\n      name: this.props.restInfo.name.value,\n      tel: this.props.restInfo.tel.value,\n      address: this.props.restInfo.address.value,\n      choices: choicesHelper.getCheckedChoices(this.props.choices)\n    };\n    // edit mode\n    if (this.props.match.params.id) {\n      // pass id\n      this.props.handleEditRest(this.props.match.params.id, newRest, this.props.history);\n    } else {\n      // in creation mode\n      this.props.handleCreateRest(newRest, this.props.history);\n    }\n    //reset all panel choices deeply\n    this.props.resetChoicesAndRestInfo();\n  };\n\n  render() {\n    return (\n        <div className=\"main-selector-panel\">\n          <form onSubmit={ (e) => this.handleSubmit(e) }>\n            <RestInputs restInfo={this.props.restInfo} onChange={ this.handleInfoChange } />\n            <ChoicesSectionBuilder />\n            <ChoicesSubmitInput disabled={ !this.isValidToSubmit() } />\n          </form>\n        </div>\n      );\n  }\n}\n\nchoicesPanelBuilder.propTypes = {\n  choices: PropTypes.array,\n  restInfo: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  choices: state.choicesPanel.choices,\n  restInfo: state.choicesPanel.restInfo\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // pass router history make sure change page after all async call\n  handleCreateRest: (rest, history) => {\n    dispatch(actions.addRest(rest, history))\n  },\n  handleEditRest: (id, rest, history) => {\n    dispatch(actions.editRest(id, rest, history))\n  },\n  setRestInfo: (restInfo) => {\n    dispatch(actions.setRestInputValues(restInfo));\n  },\n  resetChoicesAndRestInfo: () => {\n    dispatch(actions.resetChoices())\n  },\n  dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(choicesPanelBuilder);","import React, { Component } from 'react';\nimport ChoicesSectionBuilder from '../ChoicesPanelBuilder/ChoicesSectionBuilder';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ChoicesSubmitInput from '../../components/ChoicesPanel/ChoicesSubmitInput';\nimport Restaurants from '../../components/Restaurants/Restaurants';\nimport * as actions from '../../actions/actions';\nimport { choicesHelper, getRandomIntList } from '../../utils/utils';\nimport { getRestListIfNeed } from '../../actions/actions';\nimport { deleteRest } from '../../actions/actions';\nimport '../ChoicesPanelBuilder/ChoicesPanelBuilder.scss';\n\nclass findPanelBuilder extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {isSelectRest: false, selectedList: []};\n  }\n\n  componentWillMount() {\n    this.props.dispatch(getRestListIfNeed());\n  }\n\n  componentWillReceiveProps() {\n    this.setState({ selectedList:  this.randomSelectRest()});\n  }\n\n  randomSelectRest(displayNumber=3) {\n    let len = this.props.restList.length;\n    let list = this.props.restList;\n    // 如果沒有指定要顯示幾筆，或是 list 長度比少指定長度小，直接回傳 list\n    if (!displayNumber || len <= displayNumber) return list;\n\n    return getRandomIntList(displayNumber,len).map((index) => {\n      return list[index];\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let choices = choicesHelper.getCheckedChoices(this.props.choices);\n    if (choices.length !== 0) {\n      this.props.dispatch(actions.filterRestList(choices));\n      this.props.dispatch(actions.resetChoices());\n      this.setState({isSelectRest: true});\n    } else {\n      this.setState({ selectedList:  this.randomSelectRest()});\n    }\n    // scroll to top\n    window.scrollTo(0, 0);\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n          <div>\n            <span>{ this.state.isSelectRest ? '篩選結果':'隨便挑三個給你' }：</span>\n            <div>\n              {\n                this.state.selectedList.length ?\n                  <Restaurants restList={ this.state.selectedList } hideEditBtns={ true } />\n                  : <p> { this.state.isSelectRest ? \"不好意思，無篩選結果喔！\" : \"看來沒有任何餐廳耶，快去新增吧！\" }</p>\n              }\n            </div>\n          </div>\n          <div>或是在下面篩選：（無篩選=隨機再選擇）</div>\n          <div className=\"main-selector-panel\">\n            <ChoicesSectionBuilder />\n            <ChoicesSubmitInput />\n          </div>\n        </form>\n      </div>\n    )\n  };\n}\n\nfindPanelBuilder.propTypes = {\n  restList: PropTypes.array,\n  choices: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  restList: state.restaurantList.restList,\n  choices: state.choicesPanel.choices\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleRestDelete: (id) => {\n    dispatch(deleteRest(id));\n  },\n  dispatch\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(findPanelBuilder);","import React from 'react';\nimport Layout from './components/Layout/Layout.js';\nimport RestaurantsBuilder from './containers/RestaurantsBuilder/RestaurantsBuilder';\nimport ChoicesPanelBuilder from './containers/ChoicesPanelBuilder/ChoicesPanelBuilder';\nimport FindPanelBuilder from './containers/FindPanelBuilder/FindPanelBuilder';\nimport {connect} from 'react-redux';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.scss';\n\nfunction App(props) {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div>\n        <Layout>\n          <Route path=\"/\" exact component={ FindPanelBuilder }></Route>\n          <Route path=\"/show-all\" exact component={ RestaurantsBuilder }></Route>\n          <Route path=\"/create-rest\" exact component={ ChoicesPanelBuilder }></Route>\n          <Route path=\"/edit/:id\" exact component={ ChoicesPanelBuilder }></Route>\n        </Layout>\n      </div>\n      <div className={ 'is-loading ' + (props.isLoading && 'is-visible') }>\n        <div className=\"sp sp-circle\"></div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nconst mapStateToProps = state => ({\n    isLoading: state.restaurantList.isLoading\n  }\n);\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_CHOICES,\n         RESET_ALL_CHOICES,\n         SET_REST_INPUT_VALUES,\n         MAP_CHOICES_INPUTS,\n} from '../constants/ActionTypes';\nimport { deepCloneObj } from '../utils/utils';\n\n// return choices mapping for UI { label, checked }\nconst getCheckedList = (list) => {\n  return list.map((item) => {\n    return {\n      label: item,\n      checked: false\n    }\n  })\n};\n\nconst initialState = {\n  choices: [{\n      type: 'RES_PRICE',\n      label: '價格',\n      data: getCheckedList(['便宜', '還可以', '貴'])\n    },\n    {\n      type: 'RES_STYLE',\n      label: '風格',\n      data: getCheckedList(['中式', '火鍋', '西式', '日式', '異國料理', '便當', '麵店', '速食', '素食', '小吃', '早餐店', '垃圾食物'])\n    },\n    {\n      type: 'RES_TIME',\n      label: '時間',\n      data: getCheckedList(['全天', '早餐', '中餐', '晚餐', '宵夜'])\n    },\n    {\n      type: 'RES_MODE',\n      label: '心情',\n      data: getCheckedList(['有湯', '無湯', '天氣熱想吃', '天氣冷想吃', '方便', '有服務費', '無服務費', '聚餐', '有酒', '有外帶'])\n    }\n  ],\n  restInfo: {\n    name: {\n      value: '',\n        label: '*名稱',\n        inputProps: {\n          type: 'text',\n          placeholder: '請輸入餐廳名稱...',\n          errorMessage: '此欄位為必填'\n      },\n      isValid: false,\n        isRequired: true,\n        showInCreationMode: true\n    },\n    tel: {\n      value: '',\n        label: '電話',\n        inputProps: {\n          type: 'tel',\n          placeholder: '請輸入餐廳電話...',\n          errorMessage: '此欄位必須為數字'\n      },\n      isValid: true,\n        isRequired: false,\n        showInCreationMode: false\n    },\n    address: {\n      value: '',\n        label: '地址',\n        inputProps: {\n          type: 'text',\n          placeholder: '請輸入餐廳地址...'\n      },\n      isValid: true,\n        isRequired: false,\n        showInCreationMode: false\n    }\n  }\n};\n\n/***\n * 回傳 UI choices list initialState form service choices data\n *\n * ['天氣熱', '西式'] -> [{choices: type, label, choices}]\n *\n */\nconst getMappingChoices = (targetChoices = []) => {\n  let newChoices = [...deepCloneObj(initialState.choices)];\n  // 回傳 UI choices list initialState form service choices data\n  return newChoices.map( (choice) => {\n    let checkedChoices = choice.data.map((currentData) => {\n      currentData.checked = targetChoices.includes(currentData.label);\n      return {...currentData};\n    });\n    return {...choice, data: checkedChoices }\n  })\n};\n\nconst getMappingRestInfo = (rest) => {\n  let newRestInfo = {...deepCloneObj(initialState.restInfo)};\n  newRestInfo.name.value = rest.name || '';\n  newRestInfo.name.isValid = true;\n  newRestInfo.tel.value = rest.tel || '';\n  newRestInfo.address.value = rest.address || '';\n  return newRestInfo;\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CHOICES:\n      return { ...state, choices: action.choices };\n    case SET_REST_INPUT_VALUES:\n      return {...state, restInfo: action.restInfo };\n    case RESET_ALL_CHOICES:\n      return {...deepCloneObj(initialState)};\n    // return a mapping state of edit rest obj\n    case MAP_CHOICES_INPUTS:\n      return {\n        restInfo: getMappingRestInfo(action.rest),\n        choices: getMappingChoices(action.rest.choices)\n      };\n    default:\n      return state;\n  }\n};","import * as actionTypes from '../constants/ActionTypes';\n\n// use fake one now\nconst initialState = {\n  isLoading: false,\n  restList: []\n};\n\nconst getSingleServiceRest = (rest) => {\n  return {\n    id: rest.id,\n    name: rest.name,\n    tel: rest.tel,\n    address: rest.address,\n    choices: rest.choices\n  }\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_REST:\n      return {...state, restList: [...state.restList, getSingleServiceRest(action.rest)]};\n    case actionTypes.EDIT_REST:\n      return {...state, restList: state.restList.map((tempRest)=> {\n        return (action.rest.id === tempRest.id ? getSingleServiceRest(action.rest) : tempRest);\n      })};\n    case actionTypes.DELETE_REST:\n      return {...state, restList: state.restList.filter(res =>\n          res.id !== action.id\n        )};\n    case actionTypes.GET_REST_LIST:\n      return state;\n    case actionTypes.SET_REST_LIST:\n      return {...state, restList: action.list};\n    case actionTypes.FILTER_REST_LIST:\n      return {...state, restList: state.restList.filter(res => {\n          // return list if this res match one of choices\n          return res.choices.reduce( (hasMatch, choice) => {\n            return hasMatch || action.choices.includes(choice);\n          }, false);\n        })};\n    case actionTypes.SET_LOADING:\n        return {...state, isLoading: action.isLoading};\n    default:\n      return state;\n  }\n};","import { combineReducers } from 'redux';\nimport choicesPanel from './choicesPanel';\nimport restaurantList from './restaurantList';\n\nconst rootReducer = combineReducers({\n  choicesPanel,\n  restaurantList\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './stores/configureStore';\nimport { Provider } from 'react-redux';\n\nlet store = configureStore();\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from '../reducers/rootReducer';\n\nlet configureStore = ( preLoadedState ) => {\n  return createStore(\n    rootReducer,\n    preLoadedState,\n    applyMiddleware(\n      thunkMiddleware,\n      logger\n    )\n  )\n};\n\nexport default configureStore;"],"sourceRoot":""}